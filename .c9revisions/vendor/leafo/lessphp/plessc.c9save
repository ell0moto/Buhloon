{"ts":1360890572785,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/php -q\n<?php\n// Command line utility to compile LESS to STDOUT\n// Leaf Corcoran <leafot@gmail.com>, 2012\n\n$exe = array_shift($argv); // remove filename\n\n$HELP = <<<EOT\nUsage: $exe [options] input-file [output-file]\n\nOptions include:\n\n    -h, --help  Show this message\n    -v          Print the version\n    -f=format   Set the output format, includes \"default\", \"compressed\"\n    -c          Keep /* */ comments in output\n    -r          Read from STDIN instead of input-file\n    -w          Watch input-file, and compile to output-file if it is changed\n    -T          Dump formatted parse tree\n    -X          Dump raw parse tree\n\n\nEOT;\n\n$opts = getopt('hvrwncXTf:', array('help'));\nwhile (count($argv) > 0 && preg_match('/^-([-hvrwncXT]$|[f]=)/', $argv[0])) {\n\tarray_shift($argv);\n}\n\nfunction has() {\n\tglobal $opts;\n\tforeach (func_get_args() as $arg) {\n\t\tif (isset($opts[$arg])) return true;\n\t}\n\treturn false;\n}\n\nif (has(\"h\", \"help\")) {\n\texit($HELP);\n}\n\nerror_reporting(E_ALL);\n$path  = realpath(dirname(__FILE__)).'/';\n\nrequire $path.\"lessc.inc.php\";\n\n$VERSION = lessc::$VERSION;\n\n$fa = \"Fatal Error: \";\nfunction err($msg) {\n\tfwrite(STDERR, $msg.\"\\n\");\n}\n\nif (php_sapi_name() != \"cli\") {\n\terr($fa.$argv[0].\" must be run in the command line.\");\n\texit(1);\n}\n\nfunction make_less($fname = null) {\n\tglobal $opts;\n\t$l = new lessc($fname);\n\n\tif (has(\"f\")) {\n\t\t$format = $opts[\"f\"];\n\t\tif ($format != \"default\") $l->setFormatter($format);\n\t}\n\n\tif (has(\"c\")) {\n\t\t$l->setPreserveComments(true);\n\t}\n\n\treturn $l;\n}\n\nfunction process($data, $import = null) {\n\tglobal $fa;\n\n\t$l = make_less();\n\tif ($import) $l->importDir = $import;\n\n\ttry {\n\t\techo $l->parse($data);\n\t\texit(0);\n\t} catch (exception $ex) {\n\t\terr($fa.\"\\n\".str_repeat('=', 20).\"\\n\".\n\t\t\t$ex->getMessage());\n\t\texit(1);\n\t}\n}\n\nif (has(\"v\")) {\n\texit($VERSION.\"\\n\");\n}\n\nif (has(\"r\")) {\n\tif (!empty($argv)) {\n\t\t$data = $argv[0];\n\t} else {\n\t\t$data = \"\";\n\t\twhile (!feof(STDIN)) {\n\t\t\t$data .= fread(STDIN, 8192);\n\t\t}\n\t}\n\texit(process($data));\n}\n\nif (has(\"w\")) {\n\t// need two files\n\tif (!is_file($in = array_shift($argv)) ||\n\t\tnull == $out = array_shift($argv))\n\t{\n\t\terr($fa.$exe.\" -w infile outfile\");\n\t\texit(1);\n\t}\n\n\techo \"Watching \".$in.\n\t\t(has(\"n\") ? ' with notifications' : '').\n\t\t\", press Ctrl + c to exit.\\n\";\n\n\t$cache = $in;\n\t$last_action = 0;\n\twhile (true) {\n\t\tclearstatcache();\n\n\t\t// check if anything has changed since last fail\n\t\t$updated = false;\n\t\tif (is_array($cache)) {\n\t\t\tforeach ($cache['files'] as $fname=>$_) {\n\t\t\t\tif (filemtime($fname) > $last_action) {\n\t\t\t\t\t$updated = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else $updated = true;\n\n\t\t// try to compile it\n\t\tif ($updated) {\n\t\t\t$last_action = time();\n\n\t\t\ttry {\n\t\t\t\t$cache = lessc::cexecute($cache);\n\t\t\t\techo \"Writing updated file: \".$out.\"\\n\";\n\t\t\t\tif (!file_put_contents($out, $cache['compiled'])) {\n\t\t\t\t\terr($fa.\"Could not write to file \".$out);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t} catch (exception $ex) {\n\t\t\t\techo \"\\nFatal Error:\\n\".str_repeat('=', 20).\"\\n\".\n\t\t\t\t\t$ex->getMessage().\"\\n\\n\";\n\n\t\t\t\tif (has(\"n\")) {\n\t\t\t\t\t`notify-send -u critical \"compile failed\" \"{$ex->getMessage()}\"`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsleep(1);\n\t}\n\texit(0);\n}\n\nif (!$fname = array_shift($argv)) {\n\techo $HELP;\n\texit(1);\n}\n\nfunction dumpValue($node, $depth = 0) {\n\tif (is_object($node)) {\n\t\t$indent = str_repeat(\"  \", $depth);\n\t\t$out = array();\n\t\tforeach ($node->props as $prop) {\n\t\t\t$out[] = $indent . dumpValue($prop, $depth + 1);\n\t\t}\n\t\t$out = implode(\"\\n\", $out);\n\t\tif (!empty($node->tags)) {\n\t\t\t$out = \"+ \".implode(\", \", $node->tags).\"\\n\".$out;\n\t\t}\n\t\treturn $out;\n\t} elseif (is_array($node)) {\n\t\tif (empty($node)) return \"[]\";\n\t\t$type = $node[0];\n\t\tif ($type == \"block\")\n\t\t\treturn dumpValue($node[1], $depth);\n\n\t\t$out = array();\n\t\tforeach ($node as $value) {\n\t\t\t$out[] = dumpValue($value, $depth);\n\t\t}\n\t\treturn \"{ \".implode(\", \", $out).\" }\";\n\t} else {\n\t\tif (is_string($node) && preg_match(\"/[\\s,]/\", $node)) {\n\t\t\treturn '\"'.$node.'\"';\n\t\t}\n\t\treturn $node; // normal value\n\t}\n}\n\n\nfunction stripValue($o, $toStrip) {\n\tif (is_array($o) || is_object($o)) {\n\t\t$isObject = is_object($o);\n\t\t$o = (array)$o;\n\t\tforeach ($toStrip as $removeKey) {\n\t\t\tif (!empty($o[$removeKey])) {\n\t\t\t\t$o[$removeKey] = \"*stripped*\";\n\t\t\t}\n\t\t}\n\n\t\tforeach ($o as $k => $v) {\n\t\t\t$o[$k] = stripValue($v, $toStrip);\n\t\t}\n\n\t\tif ($isObject) {\n\t\t\t$o = (object)$o;\n\t\t}\n\t}\n\n\treturn $o;\n}\n\nfunction dumpWithoutParent($o, $alsoStrip=array()) {\n\t$toStrip = array_merge(array(\"parent\"), $alsoStrip);\n\tprint_r(stripValue($o, $toStrip));\n}\n\ntry {\n\t$less = make_less($fname);\n\tif (has(\"T\", \"X\")) {\n\t\t$parser = new lessc_parser($less, $fname);\n\t\t$tree = $parser->parse(file_get_contents($fname));\n\t\tif (has(\"X\"))\n\t\t\t$out = print_r($tree, 1);\n\t\telse\n\t\t\t$out = dumpValue($tree).\"\\n\";\n\t} else {\n\t\t$out = $less->parse();\n\t}\n\n\tif (!$fout = array_shift($argv)) {\n\t\techo $out;\n\t} else {\n\t\tfile_put_contents($fout, $out);\n\t}\n\n} catch (exception $ex) {\n\terr($fa.$ex->getMessage());\n\texit(1);\n}\n\n?>\n"]],"start1":0,"start2":0,"length1":0,"length2":4910}]],"length":4910}
