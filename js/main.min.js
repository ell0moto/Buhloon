'use strict';

/* ==========================================================================
   BOOTSTRAPPER
   ========================================================================== */

//app is an module that is dependent on several top level modules
var app = angular.module('App', [
	'Controllers',
	'Filters',
	'Services',
	'Directives',
	'ngResource', //for RESTful resources
	'ngCookies',
	'ui', //from Angular UI
	'ui.bootstrap'
]);

//Define all the page level controllers (Application Logic)
angular.module('Controllers', []);
//Define all shared services (Interaction with Backend)
angular.module('Services', []);
//Define all shared directives (UI Logic)
angular.module('Directives', []);
//Define all shared filters (UI Filtering)
angular.module('Filters', []);



/* ==========================================================================
   ROUTER
   ========================================================================== */

//Define all routes here and which page level controller should handle them
app.config(
	[
		'$routeProvider',
		'$locationProvider',
		function($routeProvider, $locationProvider) {
			
			//HTML5 Mode URLs
			$locationProvider.html5Mode(true).hashPrefix('!');
			
			//Routing
			$routeProvider
				.when(
					'/',
					{
						templateUrl: 'home_index.html',
						controller: 'HomeIndexCtrl',
					}
				)
				.when(
					'/main',
					{
						templateUrl: 'main_index.html',
						controller: 'MainIndexCtrl',
					}
				)
				.otherwise(
					{
						redirectTo: '/'
					}
				);
			
		}
	]
);

/* ==========================================================================
   CONFIGURE ANGULAR UI
   ========================================================================== */
/*
app.value('ui.config', {
	select2: {
		allowClear: true
	}
});
*/

/* ==========================================================================
   GLOBAL FEATURES
   ========================================================================== */

app.run([
	'$rootScope',
	'$cookies',
	'$http',
	function($rootScope, $cookies, $http){
	
		//XSRF INTEGRATION
		
		$rootScope.$watch(
			function(){
				return $cookies[serverVars.csrfCookieName];
			},
			function(){
				$http.defaults.headers.common['X-XSRF-TOKEN'] = $cookies[serverVars.csrfCookieName];
			}
		);
		
		
		//XHR ERROR HANDLER
		
	}
]);

'use strict';

angular.module('Controllers')
    .controller('HeaderPartialCtrl', [
        '$scope',
        '$location',
        'UsersServ',
        'RewardsServ',
        'ChildrenServ',
        'PlansServ',
        'NotificationsServ',
        function($scope, $location, UsersServ, RewardsServ, ChildrenServ, PlansServ, NotificationsServ) {

            //Alert Box
            $scope.closeAlert = function(index) {
                $scope.alerts.splice(index, 1);
            };

            //Modal boxes
            $scope.openRewards = function () {
                $scope.rewardsBox = true;
            };

            $scope.closeRewards = function () {
                $scope.rewardsBox = false;
            };

            $scope.openPlans = function () {
                $scope.plansBox = true;
            };

            $scope.closePlans = function () {
                $scope.plansBox = false;
            };

            $scope.openActivity = function () {
                $scope.activityBox = true;
            };

            $scope.closeActivity = function () {
                $scope.activityBox = false;
            };

            $scope.items = ['item1', 'item2'];

            $scope.opts = {
                backdropFade: true,
                dialogFade:true
            };

            //Watching Rewards
            $scope.$watch (
                function() {
                    return RewardsServ.getRewards();
                },
                function() {
                    $scope.rewards = RewardsServ.getRewards();
                    
                }
            );

            // Watching notifications
            $scope.$watch (
                function() {
                    return NotificationsServ.getNotification();
                },
                function() {
                    $scope.notifications = NotificationsServ.getNotification();
                    
                }
            );

            //Submit Reward
            $scope.submitReward = function() {

                var payload = {
                    titleOfReward: $scope.titleOfReward,
                    ribbonCost: parseInt($scope.ribbonCost),
                };

                //form validation
                var query = RewardsServ.formCheck(payload);

                if(!query.status) {

                    //Array of objects required for ng-repeat
                    var array = [query];
                    $scope.dialog = array;

                    //Reset $scope.dialog message
                    setTimeout(function() {
                        $scope.dialog.splice(0,1);
                    }, 6000);

                    return;
                }

                RewardsServ.server.save( 
                    {},
                    payload,
                    function(response){
                        console.log(response, '<- SAVE');

                        var extraLoad = {
                            id: response.content,
                            titleOfReward: $scope.titleOfReward,
                            ribbonCost: $scope.ribbonCost,
                            
                        };

                        if (response) {
                                //Server approves
                                RewardsServ.setNewReward(extraLoad);

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }
                    }
                );
            };

            //Delete
            $scope.removeReward = function(id) { 

                RewardsServ.server.remove(
                    {
                        id: id,
                    },
                    function(response){
                        console.log(response, '<- REMOVE');

                        if (response) {
                                //Server approves
                                RewardsServ.deleteReward(id);

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }
                    }
                );
            };

            //Post (create) plan
            $scope.submitPlan = function() { //function expression

                //Checking the form for a new user or an existing
				var childName;
                if($scope.nameOfChild) {
                    childName = $scope.nameOfChild;
                }else{
                    childName = $scope.existingUser;
                }

                var payload = { //payload is an object, created via literal notation
                    titleOfPlan: $scope.titleOfPlan,
                    description: $scope.description,
                    nameOfChild: childName,
                    totalIteration: parseInt($scope.totalIteration),
                    specificReward: $scope.specificReward,
                    noRibbon: parseInt($scope.noRibbon),
                    progress: 0,
                    active: 0,
                    complete: 0,
                };

                //form validation
                var query = PlansServ.formCheck(payload);

                if(!query.status) {

                    //Array of objects required for ng-repeat
                    var array = [query];
                    $scope.dialog = array;

                    //Reset $scope.dialog message
                    setTimeout(function() {
                        $scope.dialog.splice(0,1);
                    }, 6000);

                    return;
                }
            
                PlansServ.server.save( //.save is a function being called
                    {},
                    payload,
                    function(response){
                        console.log(response, '<- SAVE');

                        if (response) {

                            var extraPayload = {

                                titleOfPlan: $scope.titleOfPlan,
                                description: $scope.description,
                                nameOfChild: childName,
                                totalIteration: parseInt($scope.totalIteration),
                                specificReward: $scope.specificReward,
                                noRibbon: parseInt($scope.noRibbon),
                                progress: 0,
                                active: 0,
                                complete: 0,
                                id: response.content.id,
                                userId: response.content.userId,
                                childId: response.content.childId,
                            };

                                //Server approves
                                ChildrenServ.createPlanChild(extraPayload);

                                //Closes modal box
                                $scope.plansBox = false;

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }
                    }
                );
            };

            //watching children
            $scope.$watch (
                function() {
                    return ChildrenServ.getChildren();
                },
                function() {
                    $scope.children = ChildrenServ.getChildren();
                    
                }
            );

            //Soft delete notices & obligations
            $scope.removeNotification = function(item) {

                var payload = {
                    active: 0,
                    id: item,
                };

                NotificationsServ.server.remove(
                    {id:0,}, //Dummy data to satisfy RESTFUL
                    payload,
                    function(response){

                        if (response) {

                                //Server approves
                                NotificationsServ.removeNotifiction(payload);
                                console.log(response, '<- SOFT DELETE');

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }

                    }
                );
            };

            $scope.login = function() { //function expression

                var payload = {
                    username: $scope.username,
                    password: $scope.password,
                };

                //reset the submission errors!
                $scope.loginErrors = [];
                $scope.validationErrors = {};

                UsersServ.loginSession( //passing in arguments
                    payload,

                    function(successResponse) { //anonomous function call back

                        console.log('Successfully Logged In');
                        UsersServ.setUserData('id', successResponse.content);
                        $scope.state = true;
                        $location.path('/main');
                    },

                    function(failResponse) {

                        console.log('Could not log in');
                        
                        //check if it is a validation error
                        if(failResponse.data.code === 'validation_error'){
                            
                            if(Array.isArray(failResponse.data.content)){
                            
                                //if it is an array
                                $scope.loginErrors = failResponse.data.content;

                            
                            }else{
                            
                                //else it's an object
                                $scope.validationErrors = {
                                    username: failResponse.data.content.username,
                                    password: failResponse.data.content.password,
                                    rememberMe: failResponse.data.content.rememberMe
                                };
                            }
                        }

                        $scope.alerts = [
                            { type: 'error', msg: 'This is unfortunate, your login and/or password is incorrect' }, 
                        ];

                    }
                );

            };

            $scope.logout = function(){

                UsersServ.logoutSession(UsersServ.getUserData().id);
                //$scope.$emit('authenticationDestroy', Us);
                $scope.state = false;
                $location.path('/');
            };

            $scope.$on('authenticationProvided', function(event,args) { //authenticationProvided is a global event that is being listen to
                $scope.state = true; //anything attached to $scope.state is a model
            });
            
        }
    ]);











    // .controller('RewardsSubCtrl', [
    //     '$scope',
    //     'IncentivesServ',
    //     function($scope, IncentivesServ){



    //     //  //get
    //     //  $scope.get = function() {

    //     //      //get all rewards according to User ID
    //     //  //  IncentivesServ.get( 
    //     //  //      {
    //     //  //          // id:'9',
    //     //  //      },
    //     //  //      function(response){
    //     //  //          $scope.rewards = response.content; //references object .content and passes in it's array.
    //     //  //          console.log(response, '<- QUERY');
    //     //  //      },
    //     //  //      function(response){
    //     //  //          console.log('Error! Well this is hawkard'); //this comes from the fail function
    //     //  //      }
    //     //  //  );

    //     //  };

    //     //  //Post (create)
    //     //  $scope.submit = function() {

    //     //      var payload = {
    //     //          titleOfReward: $scope.titleOfReward,
    //     //          ribbonCost: $scope.ribbonCost,
    //     //      };

    //     //      IncentivesServ.save( 
    //     //          {}, //parameter passes in through URL
    //     //          payload,
    //     //          function(response){
    //     //              console.log(response, '<- SAVE');
    //     //          }
    //     //      );
    //     //  };

    //         //Delete
    //         // $scope.remove = function(id) { 

    //         //  console.log(id);

    //         //  IncentivesServ.remove(
    //         //      {
    //         //          id: id,
    //         //      },
    //         //      function(response){
    //         //          console.log(response, '<- REMOVE');
    //         //      }
    //         //  );
    //         // };

    //     }
    // ])

    // .controller('ActivitySubCtrl', [
    //     '$scope',
    //     'NotificationsServ',
    //     function($scope, NotificationsServ){

    //         $scope.isCollapsed = true;

            
    //         $scope.get = function() {
                
    //             // Get all notices & obligations (according to specific id)
    //             NotificationsServ.get( 
    //                 {},
    //                 function(response){

    //                     $scope.notifications = response.content; //references object .content and passes in it's array.
    //                     console.log(response, '<- QUERY');
    //                 },
    //                 function(response){
    //                     console.log('Error! Well this is hawkard'); //this comes from the failure function
    //                 }
    //             );
    //         };

            
            


    
    //     }
    // ]);
'use strict';

//Page Level Controller
//Can have multiple mini controllers, similar to methods
angular.module('Controllers')
    .controller('HomeIndexCtrl', [
        '$scope',
        'UsersServ',
        function($scope, UsersServ){

            $scope.closeAlert = function(index) {
                $scope.alerts.splice(index, 1);
            };

            $scope.register = function() {

                var payload = {
                    username: $scope.createUserName,
                    password: $scope.createPassword,
                };

                //reset the submission errors!
                $scope.loginErrors = [];
                $scope.validationErrors = {};

                UsersServ.registerAccount( //Calling a function & passing in arguments
                    payload,

                    function(successResponse) { //anonomous function call back

                        console.log('Successfully Created account');
                        UsersServ.setUserData('id', successResponse.content);

                    },

                    function(failResponse) {

                        console.log('Could not log in');
                        
                        //check if it is a validation error
                        if(failResponse.data.code === 'validation_error'){
                            
                            if(Array.isArray(failResponse.data.content)){
                            
                                //if it is an array
                                $scope.loginErrors = failResponse.data.content;

                            
                            }else{
                            
                                //else it's an object
                                $scope.validationErrors = {
                                    username: failResponse.data.content.username,
                                    password: failResponse.data.content.password,
                                    rememberMe: failResponse.data.content.rememberMe
                                };
                            }
                        }

                        $scope.alerts = [
                            { type: 'error', msg: 'This is unfortunate, please note your user name may already be taken & passwords should be longer than 8 characters' }, 
                        ];

                    }
                );

            };
        }
    ]);
'use strict';

angular.module('Controllers')
    .controller('MainIndexCtrl', [
        '$scope',
        '$location',
        'ChildrenServ',
        'PlansServ',
        'RewardsServ',
        'NotificationsServ',
        'UsersServ',
        function($scope, $location, ChildrenServ, PlansServ, RewardsServ, NotificationsServ, UsersServ){

            //Variable, function & logic statement to check if user has logged in
            var userCheck = UsersServ.getUserData();

            function isEmpty(obj) {
                for(var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        return false;
                    }
                }
                return true;
            }

            if(isEmpty(userCheck)) {
                $location.path('/');
            }

            //Alert Box
            $scope.closeAlert = function(index) {
                $scope.alerts.splice(index, 1);
            };

            //Fill boxes for when there are no plans
            var largeFill;
            var smallFill;

            // Get all children (according to specific id)
            ChildrenServ.server.get( 
                {},
                function(response){                 

                    var children = response.content; //established to keep the objects inside first response from being overwritten.
                    
                    //Get all plans (according to user id)
                    PlansServ.server.get( 
                        {},
                        function(response){

                            //Sending both children & plans to be combined by the setChildrenPlans function
                            ChildrenServ.setChildrenPlans(children, response.content);
                            $scope.children = ChildrenServ.getChildren();

                            var number = ChildrenServ.countPlans();

                            if(number === 0) {
                                $scope.largeFill = true;
                                $scope.smallFill = false;
                            }else if (number === 1) {
                                $scope.largeFill = false;
                                $scope.smallFill = true;
                            }else{
                                $scope.largeFill = false;
                                $scope.smallFill = false;
                            }
                        
                        },
                        function(response){
                            console.log('No plans');
                        }
                    );
                },
                function(response){
                    console.log('No children');
                    
                    $scope.alerts = [
                            { type: 'success', msg: "Hey, to get started create a goal or plan with 'Add New' found above this very message." }, 
                        ];
                }
            );

            // Watching notifications
            $scope.$watch (
                function() {
                    return NotificationsServ.getNotification();
                },
                function() {
                    $scope.notifications = NotificationsServ.getNotification();
                },
                true
            );

            
            //Watching Children
            $scope.$watch (
                function() {
                    return ChildrenServ.getChildren();
                },
                function() {
                    $scope.children = ChildrenServ.getChildren();

                    var number = ChildrenServ.countPlans();

                    if(number === 0) {
                        $scope.largeFill = true;
                        $scope.smallFill = false;
                    }else if (number === 1) {
                        $scope.largeFill = false;
                        $scope.smallFill = true;
                    }else{
                        $scope.largeFill = false;
                        $scope.smallFill = false;
                    }
                    
                },
                true
            );      

            //Get all rewards (according to specific id)
            RewardsServ.server.get(
                {},
                function(response){
                    
                    RewardsServ.setRewards(response.content);
                    console.log(response, '<- QUERY');
                },
                function(response){
                    console.log('Error! No rewards');
                }
            );

            //Watching rewards
            $scope.$watch (
                function() {
                    return RewardsServ.getRewards();
                },
                function() {
                    $scope.rewards = RewardsServ.getRewards();
                    
                }
            );

            // Get all notices & obligations (according to specific id)
            NotificationsServ.server.get( 
                {},
                function(response){

                    NotificationsServ.setNotifications(response.content);
                    console.log(response, '<- QUERY');
                },
                function(response){
                    console.log('No notifications');
                }
            );

            // Watching notifications
            $scope.$watch (
                function() {
                    return NotificationsServ.getNotification();
                },
                function() {
                    $scope.notifications = NotificationsServ.getNotification();
                }
            );
        }
    ])


    .controller('ChildrenSubCtrl', [
        '$scope',
        'PlansServ',
        'ChildrenServ',
        'RewardsServ',
        function($scope, PlansServ, ChildrenServ, RewardsServ){

            $scope.isCollapsed = true;

            //Purchase reward
            $scope.purchase = function(rewardId,childId) {

                if (ChildrenServ.getNetRibbons(childId) - RewardsServ.getCosts(rewardId) > 0) {
                    
                    //True: item can be paid for
                    var payload = {
                        id: childId,
                        netRibbon: ChildrenServ.getNetRibbons(childId),
                        ribbonCost: RewardsServ.getCosts(rewardId),
                    };

                    ChildrenServ.server.update(
                        {id:0,}, //Dummy data to satisfy RESTFUL
                        payload,
                        function(response){
                            console.log(response, '<- UPDATE');

                            if (response) {
                                //Server approves
                                ChildrenServ.setPurchaseRibbons(payload.id,payload.netRibbon,payload.ribbonCost);

                            }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                            }
                        }
                    );

                }else{
                    //false: item costs too much
                    console.log('failed, cannot afford item');
                }
            };

            //Delete plan
            $scope.removePlan = function(id) { 

                var largeFill;
                var smallFill;

                PlansServ.server.remove(
                    {
                        id: id,
                    },
                    function(response){
                        console.log(response, '<- REMOVE');

                        if (response) {
                                //Server approves
                                ChildrenServ.deletePlan(id);

                                var number = ChildrenServ.countPlans();

                                if(number === 0) {
                                    $scope.largeFill = true;
                                    $scope.smallFill = false;
                                }else if (number === 1) {
                                    $scope.largeFill = false;
                                    $scope.smallFill = true;
                                }else{
                                    $scope.largeFill = false;
                                    $scope.smallFill = false;
                                }

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }
                    }
                );
            };

        }
    ])

    .controller('PlansSubCtrl', [
        '$scope',
        'PlansServ',
        'ChildrenServ',
        'NotificationsServ',
        function($scope, PlansServ, ChildrenServ, NotificationsServ){

            //Modal boxes
            $scope.openProgress = function () {
                $scope.progressBox = true;
            };

            $scope.closeProgress = function () {
                $scope.progressBox = false;
            };

            $scope.items = ['item1', 'item2'];

            $scope.opts = {
                backdropFade: true,
                dialogFade:true
            };

            $scope.plan.percent = (parseInt(($scope.plan.progress)/($scope.plan.totalIteration)*100) + "%");
            $scope.plan.colour = ('#' + (Math.random() * 0xFFFFFF << 0).toString(16));

            // Put (update) plan
            $scope.updateProgress = function(plan,child) {

                plan.progress = (plan.progress + 1);
                plan.active = 1;

                if (plan.progress === plan.totalIteration) {
                    plan.complete = 1;

                    //to update completion ribbons
                    var payload = {
                        childId: child.id,
                        planId: plan.id,
                        totalRibbon: child.totalRibbon,
                        noRibbon: plan.noRibbon,
                    };

                    ChildrenServ.server.update(
                        {id:0,}, //Dummy data to satisfy RESTFUL
                        payload,
                        function(response){
                            console.log(response, '<- UPDATE');

                            if (response) {
                                //Server approves
                                ChildrenServ.setCompletionRibbons(child.id,plan.noRibbon);

                                $scope.progressBox = false;

                            }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                            }
                        }
                    );
                }

                var keepColour = plan.colour; //required because server side does not accept colour or percent in it's forms.

                delete plan.colour;
                delete plan.percent;

                PlansServ.server.update(
                    {id:0,}, //Dummy data to satisfy RESTFUL
                    plan,
                    function(response){
                        console.log(response, '<- UPDATE');

                        if (response) {
                            //Server approves

                                plan.colour = keepColour;
                                plan.percent = (parseInt((plan.progress)/(plan.totalIteration)*100) + "%");
                                ChildrenServ.updateProgress(plan); //updating client side 'database'

                                $scope.progressBox = false;

                                NotificationsServ.server.get( //triggers notifications in header to be updated
                                    {},
                                    function(response){

                                        NotificationsServ.setNotifications(response.content);
                                        console.log(response, '<- QUERY');
                                    },
                                    function(response){
                                        console.log('Error! Well this is hawkard');
                                    }
                                );

                        }else{
                                //Server failed error of some sort
                                console.log('Response did not get picked up');
                        }
                    }
                );

            };

        }
    ]);
'use strict';

angular.module('Directives')
    .directive('animateBar', [

        function() {
            return {
            // restrict: 'EA',
            // terminal: true,
                scope: true,
                link: function(scope, element) {

                    element.bind("mouseenter", function() {
                        element.removeClass().addClass('progress progress-striped active');
                    });

                    element.bind("mouseout", function() {
                        element.removeClass().addClass('progress');
                    });

                }
            };
        }
    ]);
'use strict';

angular.module('Directives')
    .directive('planDialogDir', [

        function() {
            return {

                link: function(scope, element, attributes) {

                    element.parent().show();
                    
                    element.hide().fadeIn('fast').delay(attributes.planDialogDir).fadeOut('slow', function(){
                        //we cant use ng-repeat's $last, because our messages happen intermittently
                        if(element.is(':last-child')){
                            element.parent().hide();
                        }
                    });
                }
            };
        }
    ]);
'use strict';

angular.module('Directives')
    .directive('modalBoxDir', [
        '$parse', 
        '$dialog', 
        function($parse, $dialog) {
            return {
            restrict: 'EA',
            terminal: true,
                link: function(scope, elm, attrs) {
                  var opts = angular.extend({}, scope.$eval(attrs.uiOptions || attrs.bsOptions || attrs.options));
                  var shownExpr = attrs.modal || attrs.show;
                  var setClosed;

                  // Create a dialog with the template as the contents of the directive
                  // Add the current scope as the resolve in order to make the directive scope as a dialog controller scope
                  opts = angular.extend(opts, {
                    template: elm.html(),
                    resolve: { $scope: function() { return scope; } }
                  });
                  var dialog = $dialog.dialog(opts);

                  elm.remove();

                  if (attrs.close) {
                    setClosed = function() {
                      $parse(attrs.close)(scope);
                    };
                  } else {
                    setClosed = function() {
                      if (angular.isFunction($parse(shownExpr).assign)) {
                        $parse(shownExpr).assign(scope, false);
                      }
                    };
                  }

                  scope.$watch(shownExpr, function(isShown, oldShown) {
                    if (isShown) {
                      dialog.open().then(function(){
                        setClosed();
                      });
                    } else {
                      //Make sure it is not opened
                      if (dialog.isOpen()){
                        dialog.close();
                      }
                    }
                  });
                }
            };
        }
    ]);
'use strict';

angular.module('Directives')
    .directive('placeHolderDir', [
        function(){
            
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function(scope, element, attr, ctrl) {      
                  
                  var value;
                  
                  var placeHolderDir = function () {
                      element.val(attr.placeHolderDir);
                  };
                  var unPlaceHolderDir = function () {
                      element.val('');
                  };
                  
                  scope.$watch(attr.ngModel, function (val) {
                    value = val || '';
                  });

                  element.bind('focus', function () {
                     if(value === '') unPlaceHolderDir();
                  });
                  
                  element.bind('blur', function () {
                     if (element.val() === '') placeHolderDir();
                  });
                  
                  ctrl.$formatters.unshift(function (val) {
                    if (!val) {
                      placeHolderDir();
                      value = '';
                      return attr.placeHolderDir;
                    }
                    return val;
                  });
                }
          };
        }
    ]);
'use strict';

angular.module('Directives')
    .directive('resetModalBoxDir', [

        function() {
            return {

                link: function(scope, element, attributes) {

                    element.on('hidden', function(){
                        $(this).data('modal', null);
                    });

                }
            };
        }
    ]);
'use strict';

angular.module('Services')
	.factory('AccountsServ', [
		'$resource',
		function($resource){
		
			return $resource(
				'api/accounts/:id',
				{},
				{
					update: {
						method: 'PUT'
					}
				}
			);
		
		}
	]);
'use strict';

angular.module('Services')
    .config([ //<-  config phase to acquire the $httpProvider service
        '$httpProvider', //<- you can only inject Providers in config blocks
       function($httpProvider){

            //we are using the responseInterceptors function to push in interceptors, as there could be multiple interceptors
            //$q is a promise implementation allowing us to pass a promise of a future value even if it doesn't exist currently
            $httpProvider.responseInterceptors.push(['$q', '$location', function($q, $location) {
 
                //we are in the interceptor that is being added to the list of responseInterceptors
 
                //we have to return a function that accepts a promise parameter, and return the original or new promise
 
                return function(promise) {
 
                    //here we are using a promise and applying a then function 
                    return promise.then( //<- then is part of the promise API

                        function(successResponse) {

                            return successResponse;
                        },

                        function(failureResponse) {

                            //here I'm intercepting the actual HTTP status
                            if (failureResponse.status===403){
                                console.log(failureResponse);
                                $location.path('/');

                            }
 
                            //we have return the $q promise as it will be passed onto to other interceptors
                            return $q.reject(failureResponse);
 
                        }
                    );
                };
            }]);
        }
    ]);

'use strict';

angular.module('Services')
    .factory('ChildrenServ', [
        '$resource',
        function($resource){
        
            var children = [];

            return {

                getChildren: function(){
                    return children;
                },
                // setChildren: function(newChildren){
                //  children = newChildren;
                // },

                setChildrenPlans: function(allChildren, allPlans) {

                    for(var i=0; i<allChildren.length; i++){
                        var plans = [];

                        for(var j=0; j<allPlans.length; j++) {
                            if (allChildren[i].id === allPlans[j].childId) {
                                plans.push(allPlans[j]);
                            }
                        }

                        allChildren[i].plans = plans;
                    }

                    children = allChildren;
                },

                countPlans: function() {
                    var number = 0;

                    for(var i=0; i<children.length; i++) {
                        if (children[i].plans.length > 0) {
                            number = number + 1;
                        }
                    }
                    return number;
                },

                createPlanChild: function(payLoad) {

                    for(var i=0; i<children.length; i++) {
                        if (children[i].nameOfChild === payLoad.nameOfChild) {
                        
                            //Child exists but if all plans have been deleted then .plans is now a property not object which equals false
                            if (children[i].plans === false) {

                                delete children[i].plans;

                                children[i].plans = [];

                                children[i].plans.push(payLoad);
                                return;

                            }else{

                                children[i].plans.push(payLoad);
                                return;
                            }
                        }
                    }

                    //Child does not exist, create child
                    var child = {
                        id: payLoad.childId,
                        userId: payLoad.userId,
                        nameOfChild: payLoad.nameOfChild,
                        totalRibbon: 0,
                        spentRibbon: 0,
                        netRibbon: 0,
                        totalPlan: 0,
                    };

                    var plans = [];

                    plans.push(payLoad);//Object array payLoad pushed into plans array

                    child.plans = plans;//associating plans to .plans inside child

                    children.push(child);//Object array child pushed into children array
                },

                deletePlan: function(planId) {
                    for(var i=0; i<children.length; i++){
                        var plans = children[i].plans;
                        for(var j=0; j<plans.length; j++) {

                            if(plans[j].id === planId){
                                plans.splice(j,1);
                            }
                        }
                        //ng-show needs false to accurately display that there are no plans for that child, to remove the child's name from being seen
                        if(children[i].plans.length === 0) {
                            children[i].plans = false;
                        }
                    }
                },

                updateProgress: function(plan) {
                    for(var i=0; i<children.length; i++){
                        var plans = children[i].plans;
                        for(var j=0; j<plans.length; j++) {

                            if(plans[j].id === plan.id){
                                children[i].plans[j] = plan;
                            }
                        }
                    }
                },

                getNetRibbons: function(childId){ //gets net ribbons
                    for(var i=0; i<children.length; i++){
                        if(children[i].id === childId){
                            return children[i].netRibbon;
                        }
                    }
                },

                setPurchaseRibbons: function(childId,netRibbon,ribbonCost){
                    for(var i=0; i<children.length; i++){
                        if(children[i].id === childId){
                            children[i].spentRibbon = (children[i].spentRibbon + ribbonCost);
                            children[i].netRibbon = (children[i].netRibbon - ribbonCost);
                        }
                    }
                },

                setCompletionRibbons: function(childId, noRibbon){
                    for(var i=0; i<children.length; i++){
                        if(children[i].id === childId){
                            children[i].totalRibbon = (children[i].totalRibbon + noRibbon);
                            children[i].netRibbon = (children[i].netRibbon + noRibbon);
                        }
                    }
                },

                server: $resource('api/offspring/:id',
                    {},
                    {
                        update: {
                            method: 'PUT'
                        }
                    }
                )
            };
        
        }
    ]);
'use strict';

angular.module('Services')
    .factory('NotificationsServ', [
        '$resource',
        function($resource){
        
            var notifications = [];

            return {

                getNotification: function(){
                    return notifications;
                },

                setNotifications: function(newNotice){
                    for(var i=0; i<newNotice.length; i++) {
                        newNotice[i].percent = (parseInt((newNotice[i].progress)/(newNotice[i].totalIteration)*100) + "%");
                    }
                    notifications = newNotice;
                },

                removeNotifiction: function(payload) {
                    for(var i=0; i<notifications.length; i++) {
                        if(notifications[i].id === payload.id) {
                            notifications.splice(i,1); //A better way to remove objects inside an array
                        }
                    }
                    
                    if (notifications.length === 0) { //To correct the red indication bar
                        notifications = false;
                    }
                },

                server: $resource('api/notifications/:id',
                    {},
                    {
                        update: {
                            method: 'PUT'
                        }
                    }
                )
            };
        
        }
    ]);
'use strict';

angular.module('Services')

    .factory('PlansServ', [
        '$resource', 
        function($resource){
            
            return { 

                    formCheck: function(form) {

                        console.log(form);

                        if(form.titleOfPlan === undefined) {

                            var response = {
                                status: false,
                                message: 'Please enter a name of this goal'
                            };

                        }else if (form.titleOfPlan.length < 3 || form.titleOfPlan.length > 50) {
                            
                            response = {
                                status: false,
                                message: 'Please check your title as it may be too long'
                            };

                        }else if (form.description === undefined) {
                            
                            response = {
                                status: false,
                                message: 'Please enter a description for this goal'
                            };

                        }else if (form.description.length < 3 || form.description.length > 140) {
                            
                            response = {
                                status: false,
                                message: 'Please check the description as it may be too long'
                            };

                        }else if (form.nameOfChild === undefined) {
                            
                            response = {
                                status: false,
                                message: 'Please re try the name of the user'
                            };

                        }else if (form.nameOfChild.length < 3 || form.nameOfChild.length > 40) {
                            
                            response = {
                                status: false,
                                message: "Please check the user's name as it may be too long"
                            };

                        }else if (form.totalIteration === undefined) {
                            
                            response = {
                                status: false,
                                message: 'Please enter the number of steps for this goal'
                            };

                        }else if (isNaN(form.totalIteration)) {
                            
                            response = {
                                status: false,
                                message: 'Please check that the goal has a number of steps'
                            };

                        }else if (form.specificReward === undefined) {
                            
                            response = {
                                status: true,
                            };

                        }else if (form.specificReward.length > 20) {
                            
                            response = {
                                status: false,
                                message: 'Please check name of the reward as it may be too long'
                            };

                        }else if (form.noRibbon === undefined) {
                            
                            response = {
                                status: false,
                                message: 'Please enter the number of ribbons if any for this goal'
                            };

                        }else if (isNaN(form.noRibbon)) {
                            
                            response = {
                                status: false,
                                message: 'Please check that your have selected a number for ribbons'
                            };

                        }else{
                            
                            response = {
                                status: true,
                            };
                        }

                        return response;
                    },

                    server: $resource('api/operations/:id',
                    {},
                    {
                        update:{ 
                            method: 'PUT', 
                        }
                    }
                )
            };
        }
    ]);
'use strict';

angular.module('Services')
    .factory('RewardsServ', [
        '$resource',
        function($resource){
        
            var rewards = [];
            
            return {

                getRewards: function(){
                    return rewards;
                },
                setRewards: function(newRewards){
                    rewards = newRewards;
                    // console.log(newRewards);
                    // console.log(rewards);
                },

                setNewReward: function(newReward) {
                    rewards.push(newReward);
                },

                deleteReward: function(rewardId) {
                    for(var i=0; i<rewards.length; i++){
                        if(rewards[i].id === rewardId){
                            rewards.splice(i,1);
                            break;
                        }
                    }
                },

                getCosts: function(rewardId){ //gets cost of reward
                    for(var i=0; i<rewards.length; i++){
                        if(rewards[i].id === rewardId){
                            return rewards[i].ribbonCost;
                        }
                    }
                },

                formCheck: function(form) {

                        if(form.titleOfReward === undefined) {

                            var response = {
                                status: false,
                                message: 'Please enter a reward name'
                            };

                        }else if (form.titleOfReward.length < 3 || form.titleOfReward.length > 30) {
                            
                            response = {
                                status: false,
                                message: 'Please check your reward name as it may be too long'
                            };

                        }else if (isNaN(form.ribbonCost)) {
                            
                            response = {
                                status: false,
                                message: 'Please enter an amount of ribbons for this reward'
                            };

                        }else if (form.ribbonCost === 0) {
                            
                            response = {
                                status: false,
                                message: 'Though it would be great, rewards can not be free'
                            };

                        }else if (form.ribbonCost > 99) {
                            
                            response = {
                                status: false,
                                message: 'Please keep rewards under 100 ribbons'
                            };

                        }else{
                            
                            response = {
                                status: true,
                            };
                        }

                        return response;
                    },

                server: $resource('api/incentives/:id',
                    {},
                    {
                        update: {
                            method: 'PUT'
                        }
                    }
                )
            };
        
        }
    ]);
'use strict';

angular.module('Services') //.factory is a more configurable but .provider is most configurable, you cannot have [] 'di' injection because it's in to the config phase not run phase

    .factory('SessionsServ', [ //declared service for a resource, which is then injected into a controller

        '$resource', //[]dependency injected Angual JS module '$resource' required
        function($resource){
            
            return $resource('api/sessions/:id', //id comes in a paramater
                {},//default paramenters for the resource object, left empty a this stage
                {
                    update:{ //custom method
                        method: 'PUT', //THIS METHOD DOESN'T EXIST BY DEFAULT
                    }
                }
            );
            
        }
    ]);
'use strict';

/**
 * This service will abstract the creation, session management, and authencation of the current user.
 * If you need to manage users in general, don't use this, and use the AccountsServ directly!
 * There are three possibilities of needing authenticaion:
 *  1. Visits page that completely needs authentication
 *  2. Visits page that partially requests authentication
 *  3. Directly visits authentication login page
 * Six events will be broadcasted/listened to
 *  1. authenticationPartial - Authentication Triggered on an XHR request due to 401 or 403 status code 
 *  2. authenticationLogin - User has successfully logged in
 *  3. authenticationProvided - We have all the user information (propagate changes)
 *  4. authenticationDestroy - Authentication needs to logout (due to account deletion, or when person hits logout button)
 *  5. authenticationLogout - User has successfully logged out (propagate changes)
 *  6. authenticationRegister - User has successfully registered
 *  7. authenticationFull - Authentication is needed for the entire page state
 * You should listen for authenticationPartial in order to trigger a modal box dropdown for login
 * You should listen for authenticationProvided in order to restart any authenticated actions
 * You should trigger authenticationFull in any page controller that needs to check if the person is logged in and to handle it if they are not
 * You should trigger authenticationDestroy whenever someone clicks on a logout button
 * At startup we check if the session exists, if it does, we need the id of the current user, and grab its account data on startup, or else we'll have to login each time.
 */
angular.module('Services')
    .config([
        '$httpProvider',
        function($httpProvider){
            
            $httpProvider.responseInterceptors.push(['$q', '$rootScope', function($q, $rootScope){
            
                return function(promise){
                
                    return promise.then(
                        function(successResponse){
                            return successResponse;
                        },
                        function(failResponse){
                        
                            //401 means login required (usually HTTP authentication, but we'll fudge it)
                            //403 means that the person does not have enough permissions, regardless of login
                            if(failResponse.status === 401 || failResponse.status === 403){
                            
                                var deferred = $q.defer();
                                
                                var req = {
                                    config: failResponse.config,
                                    deferred: deferred
                                };
                                
                                //this event handler will append the requests
                                $rootScope.$broadcast('authenticationPartial', req);
                                
                                //when the promise gets resolved, the rest of the callback code will activate
                                return deferred.promise;
                            
                            }
                            
                            //otherwise return the fail response
                            return $q.reject(failResponse);
                            
                        }
                    );
                
                };
            
            }]);
        
        }
    ])
    .provider('UsersServ', function(){
        
        var userData = {}, //userData is an object containing all the userData
            redirectDestination = '', //for saved redirect destination (by default it's home)
            loginPage = '/auth', //this will be configurable, but by default it's /login
            authenticationPartial = false, //this will be set as true when it's a partial authentication
            authenticatedRequests = []; //saved list of 401 and 403 requests that need authentication to be retried
        
        //allowing loginPage to be configurable
        this.setLoginPage = function(newLoginPage){
            loginPage = newLoginPage;
        };
        
        //the injectable instance
        this.$get = [
            '$rootScope',
            '$location',
            '$http',
            'AccountsServ',
            'SessionsServ',
            function($rootScope, $location, $http, AccountsServ, SessionsServ){
        
                //handling account creation API
                var userAPI = {
                
                    getUserData: function(){
                        return userData;
                    },
                    
                    setUserData: function(newUserData){
                        angular.extend(userData, newUserData); //only 1 dimensional!
                    },
                    
                    //no promises available on $resources, so we just have to add a callback chaining
                    registerAccount: function(payload, successFn, failFn){
                    
                        AccountsServ.save(
                            {},
                            payload,
                            function(successResponse){
                            
                                //broadcast this event, should result in login attempt
                                $rootScope.$broadcast('authenticationRegister', payload);
                                
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                    
                    },
                    
                    deleteAccount: function(id, successFn, failFn){
                    
                        AccountsServ.remove(
                            {
                                id: id
                            },
                            function(successResponse){
                            
                                //if this person's account got deleted
                                //will lead to logout
                                $rootScope.$broadcast('authenticationDestroy', id);
                                
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                        
                    },
                    
                    //only works if the person is logged in! (this needs to be ran on startup)
                    getAccount: function(id, successFn, failFn){
                    
                        AccountsServ.get(
                            {
                                id: id
                            },
                            function(successResponse){
                            
                                //store the data on userData
                                userData = successResponse.content;
                                
                                $rootScope.$broadcast('authenticationProvided', userData);
                            
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                    
                    },
                    
                    loginSession: function(payload, successFn, failFn){
                    
                        SessionsServ.save(
                            {},
                            payload,
                            function(successResponse){
                            
                                //broadcast successful login (now go grab data for the listeners)
                                $rootScope.$broadcast('authenticationLogin', successResponse.content);
                                
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                    
                    },
                    
                    logoutSession: function(id, successFn, failFn){
                    
                        SessionsServ.remove(
                            {
                                id: id
                            },
                            function(successResponse){
                            
                                $rootScope.$broadcast('authenticationLogout', successResponse.content);
                                
                                //reset the userData
                                userData = {};
                                
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                    
                    },
                    
                    //this acquires session information based on the session id
                    getSession: function(id, successFn, failFn){
                    
                        SessionsServ.get(
                            {
                                id: id
                            },
                            function(successResponse){
                            
                                //if successResponse has an userId, this means is already logged in, so we should go get the account
                                if(typeof successResponse.content.userId !== 'undefined'){
                                    $rootScope.$broadcast('authenticationLogin', successResponse.content.userId);
                                }
                            
                                if(typeof successFn === 'function'){
                                    successFn(successResponse);
                                }
                                
                            },
                            function(failResponse){
                            
                                if(typeof failFn === 'function'){
                                    failFn(failResponse);
                                }
                                
                            }
                        );
                    
                    }
                
                };
                
                //PARTIAL AUTHENTICATION DUE TO 401 ON HTTP INTERCEPTORS (403s are for unauthorisation regardless of login, like needing admin permissions)
                $rootScope.$on('authenticationPartial', function(event, args){
                
                    //this will only work if you attempt to fill up the session data from the very beginning
                    //first check if userData object is empty, meaning that person was not logged in
                    if(Object.keys(userData).length === 0){
                    
                        //clear the redirect
                        redirectDestination = '';
                        //setup that it is a partial
                        authenticationPartial = true;
                        //push the request object into the authenticatedRequests
                        authenticatedRequests.push(args);
                    
                    }
                    
                    //if it reached here, this means person is logged in, but still received either a 401/403
                    //either we're not truly logged in (due to tampering)
                    //or the person does not have enough permissions to view the data
                    //regardless, we now have to ignore the request
                    
                });
                
                //FULL AUTHENTICATION TRIGGERED FROM PAGE CONTROLLER
                //this has no group scaling, it just needs person to be logged in!
                $rootScope.$on('authenticationFull', function(event, args){             
                
                    //if the userData object is empty, meaning the user has not logged in, then we do the redirect
                    //otherwise nothing happens
                    if(Object.keys(userData).length === 0){
                
                        //remember current page
                        redirectDestination = $location.path;
                        //redirect to login page (configured path)
                        $location.path(loginPage);
                    
                    }
                    
                });
                
                //COMPLETED REGISTRATION (MAY OVERRIDE AUTHENTICATION FULL)
                $rootScope.$on('authenticationRegister', function(event, args){
                    
                    //point to home after account is created
                    redirectDestination = '/main';
                    userAPI.loginSession({
                        username: args.username,
                        password: args.password
                    });
                
                });
                
                //COMPLETED ACCOUNT DESTRUCTION
                $rootScope.$on('authenticationDestroy', function(event, args){
                
                    //point to home after account is deleted
                    redirectDestination = '/';
                    userAPI.logoutSession(args);
                
                });
                
                //COMPLETED LOGIN
                $rootScope.$on('authenticationLogin', function(event, args){
                    
                    //get the account information based on the id
                    userAPI.getAccount(args);
                    
                    //redirect to home
                    if(redirectDestination){
                        $location.path(redirectDestination); //this could be home, a particular page, or no redirection at all
                        redirectDestination = '/main';
                    }
                    
                    var httpRetry = function(request){
                        $http(request.config).then(
                            function(response){
                                request.deferred.resolve(response);
                            },
                            function(response){
                                request.deferred.reject(response);
                            }
                        );
                    };
                    
                    if(authenticationPartial){
                        for(var i = 0; i < authenticatedRequests.length; i++){
                            httpRetry(authenticatedRequests[i]);
                        }
                        authenticationPartial = false; //reset it
                        authenticatedRequests = []; //reset the authenticated requests buffer
                    }
                
                });
                
                //COMPLETED LOGOUT
                $rootScope.$on('authenticationLogout', function(event, args){
                
                    if(redirectDestination){
                        $location.path(redirectDestination); //this could be home, if account was deleted, or no redirection if the person simply clicked a button to logout
                        redirectDestination = '/';
                    }
                    
                });
                
                return userAPI;
        
            }
        ];
        
    })
    .run([
        'UsersServ',
        function(UsersServ){
        
            //This will run at startup in order to determine if the user is already logged in, if it is, we need to grab the userData, and broadcast authenticationProvided!
            
            //acquires the session, if there is a user id, it means we're logged in, so we should broadcast authenticationLogin
            UsersServ.getSession(0);
            //it's 0 meaning that we want the current session, not a particular person's session
            
        }
    ]);